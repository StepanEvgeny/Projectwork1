from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from logic import get_schedule_for_day, get_week_schedule, add_lesson, delete_lesson_by_id

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = '8109824187:AAGrAjqoeFpkJyXSlva8u5-HVH0qZTmmtZk'
ADMIN_ID = 7048073193  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

# === –ú–ù–û–ì–û–Ø–ó–´–ß–ù–û–°–¢–¨ ===
phrases = {
    'start': {
        'ru': "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª—ã üëã\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:",
        'en': "Hi! I'm the online school bot üëã\nClick the button below to choose a day:"
    },
    'help': {
        'ru': (
            "/start ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/week ‚Äî –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é\n"
            "/add <–¥–µ–Ω—å> <–≤—Ä–µ–º—è> <–ø—Ä–µ–¥–º–µ—Ç> ‚Äî –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫ (–∞–¥–º–∏–Ω)\n"
            "/delete <id> ‚Äî –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫ –ø–æ ID (–∞–¥–º–∏–Ω)\n"
            "/lang ru/en ‚Äî –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫\n"
            "/help ‚Äî –ü–æ–º–æ—â—å"
        ),
        'en': (
            "/start ‚Äî Main menu\n"
            "/week ‚Äî Weekly schedule\n"
            "/add <day> <time> <subject> ‚Äî Add lesson (admin)\n"
            "/delete <id> ‚Äî Delete lesson by ID (admin)\n"
            "/lang ru/en ‚Äî Change language\n"
            "/help ‚Äî Help"
        )
    },
    'choose_day': {'ru': "–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", 'en': "Choose a day of the week:"},
    'main_menu': {'ru': "üîù –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å:", 'en': "üîù Main menu:\nClick the button to choose a day:"},
    'only_admin_add': {'ru': "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–Ω—è—Ç–∏—è.", 'en': "‚õî Only the administrator can add lessons."},
    'only_admin_delete': {'ru': "‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∑–∞–Ω—è—Ç–∏—è.", 'en': "‚õî Only the administrator can delete lessons."},
    'add_format_error': {'ru': "‚ùó –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /add –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 10:00 –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", 'en': "‚ùó Use format: /add Monday 10:00 Math"},
    'delete_format_error': {'ru': "‚ùó –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /delete <id>", 'en': "‚ùó Use format: /delete <id>"},
    'language_set': {'ru': "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ru", 'en': "Language set: en"},
    'language_hint': {'ru': "–£–∫–∞–∂–∏ —è–∑—ã–∫: /lang ru –∏–ª–∏ /lang en", 'en': "Please specify the language: /lang ru or /lang en"},
    'back': {'ru': "üîô –ù–∞–∑–∞–¥", 'en': "üîô Back"},
    'home': {'ru': "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 'en': "üè† Main menu"},
    'view_schedule': {'ru': "üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", 'en': "üìÖ View schedule"},
}

user_lang = {}

day_translations = {
    '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 'Monday',
    '–í—Ç–æ—Ä–Ω–∏–∫': 'Tuesday',
    '–°—Ä–µ–¥–∞': 'Wednesday',
    '–ß–µ—Ç–≤–µ—Ä–≥': 'Thursday',
    '–ü—è—Ç–Ω–∏—Ü–∞': 'Friday',
    '–°—É–±–±–æ—Ç–∞': 'Saturday',
    '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 'Sunday',
    'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
    'Wednesday': '–°—Ä–µ–¥–∞',
    'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
    'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
    'Saturday': '–°—É–±–±–æ—Ç–∞',
    'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
}

def _(user_id, key):
    lang = user_lang.get(user_id, 'ru')
    return phrases.get(key, {}).get(lang, key)

# === –•–ï–ù–î–õ–ï–†–´ ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_lang[update.effective_user.id] = 'ru'
    keyboard = [[InlineKeyboardButton(_(update.effective_user.id, 'view_schedule'), callback_data='choose_day')]]
    await update.message.reply_text(_(update.effective_user.id, 'start'), reply_markup=InlineKeyboardMarkup(keyboard))

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(_(update.effective_user.id, 'help'))

async def week_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(get_week_schedule(), parse_mode='Markdown')

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args and context.args[0] in ['ru', 'en']:
        user_lang[update.effective_user.id] = context.args[0]
        await update.message.reply_text(_(update.effective_user.id, 'language_set'))
    else:
        await update.message.reply_text(_(update.effective_user.id, 'language_hint'))

async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text(_(update.effective_user.id, 'only_admin_add'))
        return
    try:
        day_input = context.args[0]
        day = day_translations.get(day_input, day_input)
        time, subject = context.args[1], " ".join(context.args[2:])
        msg = add_lesson(day, time, subject)
        await update.message.reply_text(msg)
    except:
        await update.message.reply_text(_(update.effective_user.id, 'add_format_error'))

async def delete_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text(_(update.effective_user.id, 'only_admin_delete'))
        return
    try:
        lesson_id = int(context.args[0])
        msg = delete_lesson_by_id(lesson_id)
        await update.message.reply_text(msg)
    except:
        await update.message.reply_text(_(update.effective_user.id, 'delete_format_error'))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    if query.data == 'choose_day':
        ru_days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        days_keyboard = [
            [InlineKeyboardButton(f"üóì {day_translations[day] if user_lang.get(user_id) == 'en' else day}", callback_data=f'day_{day}')]
            for day in ru_days
        ]
        days_keyboard.append([InlineKeyboardButton(_(user_id, 'home'), callback_data='main_menu')])
        await query.edit_message_text(_(user_id, 'choose_day'), reply_markup=InlineKeyboardMarkup(days_keyboard))

    elif query.data.startswith('day_'):
        day = query.data.split('_')[1]
        schedule = get_schedule_for_day(day)
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton(_(user_id, 'back'), callback_data='choose_day')],
            [InlineKeyboardButton(_(user_id, 'home'), callback_data='main_menu')],
        ])
        await query.edit_message_text(schedule, parse_mode='Markdown', reply_markup=reply_markup)

    elif query.data == 'main_menu':
        keyboard = [[InlineKeyboardButton(_(user_id, 'view_schedule'), callback_data='choose_day')]]
        await query.edit_message_text(_(user_id, 'main_menu'), reply_markup=InlineKeyboardMarkup(keyboard))

# === –ó–ê–ü–£–°–ö ===
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("week", week_schedule))
    app.add_handler(CommandHandler("lang", set_language))
    app.add_handler(CommandHandler("add", add_command))
    app.add_handler(CommandHandler("delete", delete_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    app.run_polling()
